

import org.lwjgl.LWJGLException;
import org.lwjgl.input.Keyboard;
import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.DisplayMode;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import static org.lwjgl.opengl.GL11.*;

/**
* Shows how to use input to achieve cool results. Thanks to Azziplekkus1337 for the better way of handling the cool-down!
*
* @author Oskar
*/
public class InputDemo {

    private static List<Box> shapes = new ArrayList<Box>(3);
    private static List<Player> user = new ArrayList<Player>(1);
    private static boolean somethingIsSelected = false;
    private static long lastColourChange;

    public static void main(String args[]) {
        try {
            Display.setDisplayMode(new DisplayMode(640, 480));
            Display.setTitle("Input Demo");
            Display.create();
        } catch (LWJGLException e) {
            e.printStackTrace();
            Display.destroy();
            System.exit(1);
        }
        glMatrixMode(GL_PROJECTION);
        glOrtho(0, 640, 480, 0, 1, -1);
        
        glMatrixMode(GL_MODELVIEW);
        int userx=250,usery=175,heading=90;
        boolean radar=false;
        while (!Display.isCloseRequested()) {
            glClear(GL_COLOR_BUFFER_BIT);
            while (Keyboard.next()) {
                if (Keyboard.getEventKey() == Keyboard.KEY_C && Keyboard.getEventKeyState() && shapes.size()<4) {
                    shapes.add(new Box(Mouse.getX(), 480-Mouse.getY()));
                }
                else if (Keyboard.getEventKey() == Keyboard.KEY_R && Keyboard.getEventKeyState())
                {
                	if(!radar)
                		radar=true;
                	else
                		radar=false;
                }
            }
            if (Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {
                Display.destroy();
                System.exit(0);
            }
            for (final Box box : shapes) {
                if (Mouse.isButtonDown(0) && box.isInBounds(Mouse.getX(), 480 - Mouse.getY()) && !somethingIsSelected) {
                    somethingIsSelected = true;
                    box.selected = true;
                }
                if (Mouse.isButtonDown(2) && box.isInBounds(Mouse.getX(), 480 - Mouse.getY()) && !somethingIsSelected)
                    if ((System.currentTimeMillis() - lastColourChange) >= 200 /* milliseconds */) {
                        box.randomiseColors();
                        lastColourChange = System.currentTimeMillis();
                    }
                if (Mouse.isButtonDown(1)) {
                    box.selected = false;
                    somethingIsSelected = false;
                }
                if (box.selected) {
                    box.update(Mouse.getDX(), -Mouse.getDY());
                }

                box.draw();
            }
            
            for (int i=0;i<1;i++)
            {
            	
            	glColor3f(.2f, .6f,.2f);
            	
	            
                glBegin(GL_QUADS);
                int x=295;
                int y=150;
                glVertex2f(x, y);
                glVertex2f(x + 50, y);
                glVertex2f(x + 50, y + 200);
                glVertex2f(x, y + 200);
                glEnd();
                
                glBegin(GL_QUADS);
                glVertex2f(180, 90);
                glVertex2f(380, 90);
                glVertex2f(380, 140);
                glVertex2f(180, 140);
                glEnd();
                
                
                if (Keyboard.isKeyDown(Keyboard.KEY_UP)) {
                	userx += Math.cos(Math.toRadians(heading)) * 3;
            		usery -= Math.sin(Math.toRadians(heading)) * 3;
                } 
                else if (Keyboard.isKeyDown(Keyboard.KEY_DOWN)) {
                	userx -= Math.cos(Math.toRadians(heading)) * 3;
            		usery += Math.sin(Math.toRadians(heading)) * 3;
                }
                if (Keyboard.isKeyDown(Keyboard.KEY_LEFT)) {
                    heading+=5;
                }
                else if (Keyboard.isKeyDown(Keyboard.KEY_RIGHT)) {
                	heading-=5;
                }
                
            	if (radar)
                drawHollowCircle(userx,usery,50);
                glColor3f(.2f, .2f,.7f);
                
                glLineWidth(2);
                glBegin(GL_LINES);
                glVertex2f(userx, usery);
                glVertex2f((float)(userx+Math.cos(Math.toRadians(heading)) * 10), (float)(usery-Math.sin(Math.toRadians(heading)) * 10));
                glEnd();
                
                glBegin(GL_TRIANGLE_FAN);
                //glVertex2d(200,100);
            	for(int j =0; j <= 360; j++){
            	glVertex2f((float)(userx + Math.sin(j) * 5), (float)(usery + Math.cos(j) * 5));
            	}
            	glEnd(); 
            }

            Display.update();
            Display.sync(60);
        }

        Display.destroy();
    }

    private static class Box {

        public int x, y;
        public boolean selected = false;
        private float colorRed, colorBlue, colorGreen;

        Box(int x, int y) {
            this.x = x;
            this.y = y;

            Random randomGenerator = new Random();
            colorRed = randomGenerator.nextFloat();
            colorBlue = randomGenerator.nextFloat();
            colorGreen = randomGenerator.nextFloat();
        }

        boolean isInBounds(int mouseX, int mouseY) {
            return mouseX > x-4 && mouseX < x + 4 && mouseY > y-4 && mouseY < y + 4;
        }

        void update(int dx, int dy) {
            x += dx;
            y += dy;
        }

        void randomiseColors() {
            Random randomGenerator = new Random();
            colorRed = randomGenerator.nextFloat();
            colorBlue = randomGenerator.nextFloat();
            colorGreen = randomGenerator.nextFloat();
        }

        void draw() {
            glColor3f(colorRed, colorGreen, colorBlue);
            glBegin(GL_TRIANGLE_FAN);
            glVertex2d(x,y);
        	for(int j =0; j <= 360; j++){
        	glVertex2f((float)(x + Math.sin(j) * 5), (float)(y + Math.cos(j) * 5));
        	}
        	glEnd(); 
        }
    }
    static void drawHollowCircle(float x, float y, float radius){
    	int i;
    	int lineAmount = 100; //# of triangles used to draw circle
    	//GLfloat radius = 0.8f; //radius
    	float twicePi = (float) (2.0f * Math.PI);
    	glBegin(GL_LINE_LOOP);
    	for(i = 0; i <= lineAmount;i++) {
    	glVertex2f(
    	(float)(x + (radius * Math.cos(i * twicePi / lineAmount))),
    	(float)(y + (radius* Math.sin(i * twicePi / lineAmount)))
    	);
    	}
    	glEnd();
    	}
    
    private static class Player {

        public int x, y;
        public boolean selected = false;
        private float colorRed, colorBlue, colorGreen;

        Player(int x, int y) {
            this.x = x;
            this.y = y;

            Random randomGenerator = new Random();
            colorRed = randomGenerator.nextFloat();
            colorBlue = randomGenerator.nextFloat();
            colorGreen = randomGenerator.nextFloat();
        }

        boolean isInBounds(int mouseX, int mouseY) {
            return mouseX > x-12 && mouseX < x + 12 && mouseY > y-12 && mouseY < y + 12;
        }

        void update(int dx, int dy) {
            x += dx;
            y += dy;
        }

        void randomiseColors() {
            Random randomGenerator = new Random();
            colorRed = randomGenerator.nextFloat();
            colorBlue = randomGenerator.nextFloat();
            colorGreen = randomGenerator.nextFloat();
        }

        void draw() {
            glColor3f(colorRed, colorGreen, colorBlue);
            glBegin(GL_TRIANGLE_FAN);
            glVertex2d(x,y);
        	for(int j =0; j <= 360; j++){
        	glVertex2f((float)(x + Math.sin(j) * 20), (float)(y + Math.cos(j) * 20));
        	}
        	glEnd(); 
        }
    }
}
